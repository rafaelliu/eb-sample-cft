AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  RotationLambdaARN:
    Description: The ARN of the rotation lambda
    Value:
      Fn::GetAtt: SecretsManagerRDSMySQLRotationSingleUser.Arn
Conditions:
  AddVpcConfig:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - ''
        - Fn::Join:
          - ''
          - Ref: vpcSubnetIds
    - Fn::Not:
      - Fn::Equals:
        - ''
        - Fn::Join:
          - ''
          - Ref: vpcSecurityGroupIds
  KmsKeyArnExists:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: kmsKeyArn
Resources:
  SecretsManagerRDSMySQLRotationSingleUser:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: secrets-manager-rotation-apps-c0de1e0412b469545054417cc38af3c3
        S3Key: SecretsManagerRDSMySQLRotationSingleUser/SecretsManagerRDSMySQLRotationSingleUser.zip
      Description: Conducts an AWS SecretsManager secret rotation for RDS MySQL using
        single user rotation scheme
      VpcConfig:
        Fn::If:
        - AddVpcConfig
        - SubnetIds:
            Ref: vpcSubnetIds
          SecurityGroupIds:
            Ref: vpcSecurityGroupIds
        - Ref: AWS::NoValue
      Tags:
      - Value: SAM
        Key: lambda:createdBy
      - Value: Rotation
        Key: SecretsManagerLambda
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT:
            Ref: endpoint
          EXCLUDE_CHARACTERS:
            Ref: excludeCharacters
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
        - SecretsManagerRDSMySQLRotationSingleUserRole
        - Arn
      Timeout: 30
      Runtime: python3.7
      FunctionName:
        Ref: functionName
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: SecretsManagerRDSMySQLRotationSingleUser.Arn
      Principal:
        Ref: invokingServicePrincipal
  SecretsManagerRDSMySQLRotationSingleUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: SecretsManagerRDSMySQLRotationSingleUserRolePolicy0
        PolicyDocument:
          Statement:
          - Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DetachNetworkInterface
            Resource: '*'
            Effect: Allow
      - PolicyName: SecretsManagerRDSMySQLRotationSingleUserRolePolicy1
        PolicyDocument:
          Statement:
          - Action:
            - secretsmanager:DescribeSecret
            - secretsmanager:GetSecretValue
            - secretsmanager:PutSecretValue
            - secretsmanager:UpdateSecretVersionStage
            Resource:
              Fn::Sub: arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
            Effect: Allow
            Condition:
              StringEquals:
                secretsmanager:resource/AllowRotationLambdaArn:
                  Fn::Sub:
                  - arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${functionName}
                  - functionName:
                      Ref: functionName
          - Action:
            - secretsmanager:GetRandomPassword
            Resource: '*'
            Effect: Allow
      - Fn::If:
        - KmsKeyArnExists
        - PolicyName: SecretsManagerRDSMySQLRotationSingleUserRolePolicy2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey
              Resource:
                Ref: kmsKeyArn
              Effect: Allow
        - Ref: AWS::NoValue
      Tags:
      - Value: SAM
        Key: lambda:createdBy
      - Value: Rotation
        Key: SecretsManagerLambda
Parameters:
  endpoint:
    Type: String
    Description: The Secrets Manager endpoint to hit
  vpcSubnetIds:
    Default: ''
    Type: CommaDelimitedList
    Description: List of VPC subnet IDs
  functionName:
    Type: String
    Description: The name of the lambda function
  kmsKeyArn:
    Default: ''
    Type: String
    Description: The kms key used to encrypt the secret being rotated
  vpcSecurityGroupIds:
    Default: ''
    Type: CommaDelimitedList
    Description: List of VPC security grouop IDs
  invokingServicePrincipal:
    Default: secretsmanager.amazonaws.com
    Type: String
    Description: The Service Principal of the invoking service
  excludeCharacters:
    Default: /@"'\
    Type: String
    Description: A string that includes characters that should not be included in
      the generated password
