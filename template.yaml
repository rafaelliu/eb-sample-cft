AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::SecretsManager-2020-07-23
Description: Sample SAM Template for eb-example


Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id

  # LB config
  # SG Has to be open to the public so LB can accept traffit
  # Subnet needs internet ingress
  SGPublic:
    Type: AWS::EC2::SecurityGroup::Id
  SubnetPublicA:
    Type: AWS::EC2::Subnet::Id
  SubnetPublicB:
    Type: AWS::EC2::Subnet::Id

  # App config
  # SG Has to allow port 80/443 from LB
  # Subnet needs egress to Cloudformation endpoint
  SGApp: 
    Type: AWS::EC2::SecurityGroup::Id
  SubnetAppA:
    Type: AWS::EC2::Subnet::Id
  SubnetAppB:
    Type: AWS::EC2::Subnet::Id

  # Database config
  # SG Has to allow port 3306 from App
  SGData: 
    Type: AWS::EC2::SecurityGroup::Id
  SubnetDataA:
    Type: AWS::EC2::Subnet::Id
  SubnetDataB:
    Type: AWS::EC2::Subnet::Id

Resources:




  #
  # Beanstalk's application
  #

  SampleApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk Sample Node.js Application

  SampleApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      Description: Version 1.0
      ApplicationName: !Ref SampleApplication
      SourceBundle: ./app-code

  SampleEnvironment:
    Type: "AWS::ElasticBeanstalk::Environment"
    Properties:
      ApplicationName: !Ref SampleApplication
      VersionLabel: !Ref SampleApplicationVersion
      Description: Elastic Beanstalk sample
      # Supported stacks: https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html
      SolutionStackName: "64bit Amazon Linux 2 v5.4.1 running Node.js 14"
      Tier:
        Name: WebServer
        Type: Standard
        Version: " "
      # Supported options: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html
      OptionSettings:
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application

        # Environment variables available to the app
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DB_SECRET_ARN
          Value: !Ref MyRDSInstanceRotationSecret
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: S3_BUCKET_NAME
          Value: !Ref SampleBucket

        # Instance configuration
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Sub ${SubnetAppA},${SubnetAppB}
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: IamInstanceProfile
          Value: !Ref WebServerInstanceProfile
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t2.medium
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value: !Ref SGApp
        
        # Networking
        - Namespace: aws:ec2:vpc
          OptionName: AssociatePublicIpAddress
          Value: "true" # TODO: set false and move app to a private subnet
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VPCId

        # Load balancing
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Sub ${SubnetPublicA},${SubnetPublicB}
        - Namespace: aws:elbv2:loadbalancer
          OptionName: SecurityGroups
          Value: !Ref SGPublic
        - Namespace: aws:elbv2:loadbalancer
          OptionName: ManagedSecurityGroup
          Value: !Ref SGPublic



  #
  # IAM Role for Beanstalk's instances
  #

  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # Example from: https://docs.aws.amazon.com/secretsmanager/latest/userguide/permissions_grant-get-secret-value-to-one-secret.html
        - PolicyName: SecretsManagerRead
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref MyRDSInstanceRotationSecret

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref WebServerRole



  #
  # Database
  #
  
  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  MyRDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is my rds instance secret'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  #This is an RDS instance resource. Its master username and password use dynamic references to resolve values from 
  #SecretsManager. The dynamic reference guarantees that CloudFormation will not log or persist the resolved value 
  #We sub the Secret resource's logical id in order to construct the dynamic reference, since the Secret's name is being #generated by CloudFormation
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Retain
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      MasterUsername: !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::password}}'
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - !Ref SGData

  #Database subnet group for the RDS instance 
  MyDBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for RDS
      SubnetIds:
        - !Ref SubnetDataA
        - !Ref SubnetDataB

  #This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
  #the referenced RDS instance
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      TargetId: !Ref MyDBInstance
      TargetType: AWS::RDS::DBInstance
  
  #This is a RotationSchedule resource. It configures rotation of password for the referenced secret using a rotation lambda
  #The first rotation happens at resource creation time, with subsequent rotations scheduled according to the rotation rules
  #We explicitly depend on the SecretTargetAttachment resource being created to ensure that the secret contains all the
  #information necessary for rotation to succeed
  MySecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRDSInstanceAttachment 
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      HostedRotationLambda:
        RotationType: MySQLSingleUser
        RotationLambdaName: !Sub SecretsManagerRotation
        VpcSecurityGroupIds: !Ref SGData
        VpcSubnetIds: !Sub '${SubnetDataA},${SubnetDataB}'
      RotationRules:
        AutomaticallyAfterDays: 30




  #
  # S3 bucket
  #

  SampleBucket:
    Type: 'AWS::S3::Bucket'




Outputs:
  SampleBucket:
    Value: !Ref SampleBucket
  MyRDSInstanceRotationSecret:
    Value: !Ref MyRDSInstanceRotationSecret
  SampleEnvironment:
    Value: !GetAtt SampleEnvironment.EndpointURL
